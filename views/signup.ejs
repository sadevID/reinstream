<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign Up - ReInstream</title>
  <link rel="icon" href="/images/logo_mobile.svg" type="image/svg+xml">
  <link rel="preload" href="/images/logo_mobile.svg" as="image" type="image/svg+xml">
  <link rel="alternate icon" href="/images/favicon.ico" type="image/x-icon">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@2.30.0/tabler-icons.min.css">
  <link rel="stylesheet" href="/css/styles.css">
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        fontFamily: {
          'inter': ['Inter', 'sans-serif'],
          'sans': ['Inter', 'system-ui', 'sans-serif']
        },
        extend: {
          colors: {
            'primary': '#0055FF',
            'secondary': '#0043CA',
            'dark': {
              '900': '#121212',
              '800': '#252525',
              '700': '#2D2D2D',
              '600': '#3D3D3D',
              '500': '#6E6E6E',
              '400': '#8F8F8F',
              '100': '#E5E5E5',
            }
          }
        }
      }
    }
  </script>
</head>
<body class="bg-dark-900 text-white font-inter">
  <div class="min-h-screen flex flex-col">
    <div class="flex-1 flex items-center justify-center px-6 py-10">
      <div class="w-full max-w-lg bg-dark-800 rounded-xl shadow-xl p-6 sm:p-8">
      
        <div class="text-center mb-8">
          <h1 class="text-2xl font-bold">Create Account</h1>
          <p class="text-gray-400 mt-1">Join streaming membership</p>
        </div>

        <% if (typeof error !=='undefined' && error) { %>
          <div class="bg-red-500/10 border border-red-500/20 text-red-400 px-4 py-3 rounded mb-6">
            <p><i class="ti ti-alert-circle mr-2"></i>
              <%= error %>
            </p>
          </div>
          <% } %>

      <% if (success) { %>
        <div id="success-message" class="bg-green-500/10 border border-green-500/20 text-green-400 px-4 py-3 rounded-lg mb-6">
          <div class="flex items-center">
            <i class="ti ti-check-circle mr-2"></i>
            <span><%= success %></span>
          </div>
        </div>
      <% } %>

            <form id="signupForm" action="/signup" method="post" enctype="multipart/form-data" class="space-y-6">
              <input type="hidden" name="_csrf" value="<%= csrfToken %>">
              <input type="hidden" name="user_role" value="member">
              <input type="hidden" name="status" value="inactive">
              
              <div class="flex flex-col items-center justify-center">
                <div class="relative group">
                  <div id="avatar-preview"
                    class="w-28 h-28 rounded-full bg-dark-700 border-2 border-gray-600 group-hover:border-primary flex items-center justify-center text-gray-400 overflow-hidden transition-colors">
                    <i class="ti ti-user text-4xl"></i>
                  </div>
                  <div class="absolute bottom-0 right-0">
                    <label for="avatar-upload"
                      class="flex items-center justify-center w-8 h-8 rounded-full bg-primary cursor-pointer shadow-lg">
                      <i class="ti ti-camera text-white"></i>
                    </label>
                    <input id="avatar-upload" name="avatar" type="file" accept="image/*" class="hidden"
                      onchange="previewAvatar(event)">
                  </div>
                </div>
                <p class="text-xs text-gray-400 mt-2">Upload a profile picture</p>
              </div>
              
              <div>
                <label for="username" class="text-sm font-medium block mb-2">Username</label>
                <div class="relative">
                  <input type="text" id="username" name="username"
                    class="w-full pl-10 pr-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                    placeholder="Choose a username" required>
                  <i class="ti ti-user absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                </div>
              </div>
              
              <div>
                <label for="password" class="text-sm font-medium block mb-2">Password</label>
                <div class="relative">
                  <input type="password" id="password" name="password"
                    class="w-full pl-10 pr-12 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                    placeholder="Create a password" required minlength="6" onkeyup="checkPasswordStrength()">
                  <i class="ti ti-lock absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                  <button type="button" onclick="togglePasswordVisibility('password', 'passwordToggle')"
                    class="absolute right-3 top-1/2 -translate-y-1/2 flex items-center justify-center text-gray-400 hover:text-white transition-colors">
                    <i class="ti ti-eye text-base" id="passwordToggle"></i>
                  </button>
                </div>
                <div id="passwordStrength" class="mt-2 text-xs hidden">
                  <div class="flex space-x-1 mb-1">
                    <div class="h-1 flex-1 bg-gray-600 rounded" id="strength1"></div>
                    <div class="h-1 flex-1 bg-gray-600 rounded" id="strength2"></div>
                    <div class="h-1 flex-1 bg-gray-600 rounded" id="strength3"></div>
                    <div class="h-1 flex-1 bg-gray-600 rounded" id="strength4"></div>
                  </div>
                  <span id="strengthText" class="text-gray-400">Password strength</span>
                </div>
              </div>

              <div class="pb-3">
                <label for="confirmPassword" class="text-sm font-medium block mb-2">Confirm Password</label>
                <div class="relative">
                  <input type="password" id="confirmPassword" name="confirmPassword"
                    class="w-full pl-10 pr-12 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                    placeholder="Confirm your password" required onkeyup="checkPasswordMatch()">
                  <i class="ti ti-lock-check absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                  <button type="button" onclick="togglePasswordVisibility('confirmPassword', 'confirmPasswordToggle')"
                    class="absolute right-3 top-1/2 -translate-y-1/2 flex items-center justify-center text-gray-400 hover:text-white transition-colors">
                    <i class="ti ti-eye text-base" id="confirmPasswordToggle"></i>
                  </button>
                </div>
                <div id="passwordMatch" class="mt-1 text-xs hidden">
                  <span id="matchText"></span>
                </div>
              </div>
              
              <button type="submit" id="submitBtn"
                class="w-full bg-primary hover:bg-blue-600 text-white py-2.5 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                Create Account
              </button>
            </form>

            <div class="text-center mt-6">
              <p class="text-gray-400 text-sm">
                Already have an account? 
                <a href="/login" class="text-primary hover:text-blue-400 transition-colors">Sign in</a>
              </p>
            </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const icons = document.querySelectorAll('.ti');
      icons.forEach(icon => {
        icon.classList.add('font-loaded');
      });
    });

    function previewAvatar(event) {
      const input = event.target;
      if (input.files && input.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.getElementById('avatar-preview');
          preview.innerHTML = `<img src="${e.target.result}" class="w-full h-full object-cover">`;
        };
        reader.readAsDataURL(input.files[0]);
      }
    }

    function togglePasswordVisibility(inputId, toggleId) {
      const input = document.getElementById(inputId);
      const toggle = document.getElementById(toggleId);
      if (input.type === 'password') {
        input.type = 'text';
        toggle.classList.remove('ti-eye');
        toggle.classList.add('ti-eye-off');
      } else {
        input.type = 'password';
        toggle.classList.remove('ti-eye-off');
        toggle.classList.add('ti-eye');
      }
    }

    function checkPasswordStrength() {
      const password = document.getElementById('password').value;
      const strengthDiv = document.getElementById('passwordStrength');
      const strengthText = document.getElementById('strengthText');
      const bars = ['strength1', 'strength2', 'strength3', 'strength4'];
      
      if (password.length === 0) {
        strengthDiv.classList.add('hidden');
        return;
      }
      
      strengthDiv.classList.remove('hidden');
      
      let strength = 0;
      if (password.length >= 6) strength++;
      if (password.match(/[a-z]/)) strength++;
      if (password.match(/[A-Z]/)) strength++;
      if (password.match(/[0-9]/) || password.match(/[^a-zA-Z0-9]/)) strength++;
      
      bars.forEach((bar, index) => {
        const element = document.getElementById(bar);
        if (index < strength) {
          if (strength <= 1) {
            element.className = 'h-1 flex-1 bg-red-500 rounded';
          } else if (strength <= 2) {
            element.className = 'h-1 flex-1 bg-yellow-500 rounded';
          } else if (strength <= 3) {
            element.className = 'h-1 flex-1 bg-blue-500 rounded';
          } else {
            element.className = 'h-1 flex-1 bg-green-500 rounded';
          }
        } else {
          element.className = 'h-1 flex-1 bg-gray-600 rounded';
        }
      });
      
      const strengthLabels = ['Weak', 'Fair', 'Good', 'Strong'];
      const strengthColors = ['text-red-400', 'text-yellow-400', 'text-blue-400', 'text-green-400'];
      
      strengthText.textContent = strengthLabels[strength - 1] || 'Very Weak';
      strengthText.className = strengthColors[strength - 1] || 'text-red-400';
    }

    function checkPasswordMatch() {
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const matchDiv = document.getElementById('passwordMatch');
      const matchText = document.getElementById('matchText');
      const submitBtn = document.getElementById('submitBtn');
      
      if (confirmPassword.length === 0) {
        matchDiv.classList.add('hidden');
        submitBtn.disabled = false;
        return;
      }
      
      matchDiv.classList.remove('hidden');
      
      if (password === confirmPassword) {
        matchText.textContent = 'Passwords match';
        matchText.className = 'text-green-400';
        submitBtn.disabled = false;
      } else {
        matchText.textContent = 'Passwords do not match';
        matchText.className = 'text-red-400';
        submitBtn.disabled = true;
      }
    }
  </script>
</body>
</html>
